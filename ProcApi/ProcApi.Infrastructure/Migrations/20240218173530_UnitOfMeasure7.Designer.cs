// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProcApi.Domain.Entities;
using ProcApi.Infrastructure.Data;

#nullable disable

namespace ProcApi.Infrastructure.Migrations
{
    [DbContext(typeof(ProcDbContext))]
    [Migration("20240218173530_UnitOfMeasure7")]
    partial class UnitOfMeasure7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProcApi.Domain.Entities.ApprovalFlowTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("FlowCode")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsCreator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInitial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("boolean");

                    b.Property<float>("Order")
                        .HasColumnType("real");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ApprovalFlowTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DocumentTypeId = 1,
                            FlowCode = "STANDART",
                            IsCreator = true,
                            IsInitial = true,
                            IsMultiple = false,
                            Order = 1f,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 2,
                            DocumentTypeId = 1,
                            FlowCode = "STANDART",
                            IsCreator = false,
                            IsInitial = true,
                            IsMultiple = false,
                            Order = 2f,
                            RoleId = 7,
                            UserId = 14
                        },
                        new
                        {
                            Id = 3,
                            DocumentTypeId = 1,
                            FlowCode = "STANDART",
                            IsCreator = false,
                            IsInitial = true,
                            IsMultiple = false,
                            Order = 3f,
                            RoleId = 8,
                            UserId = 12
                        },
                        new
                        {
                            Id = 4,
                            DocumentTypeId = 1,
                            FlowCode = "BUYER",
                            IsCreator = false,
                            IsInitial = false,
                            IsMultiple = true,
                            Order = 4f,
                            RoleId = 9
                        },
                        new
                        {
                            Id = 5,
                            DocumentTypeId = 2,
                            FlowCode = "STANDART",
                            IsCreator = true,
                            IsInitial = true,
                            IsMultiple = false,
                            Order = 1f,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 6,
                            DocumentTypeId = 2,
                            FlowCode = "STANDART",
                            IsCreator = false,
                            IsInitial = true,
                            IsMultiple = false,
                            Order = 2f,
                            RoleId = 7
                        },
                        new
                        {
                            Id = 7,
                            DocumentTypeId = 2,
                            FlowCode = "STANDART",
                            IsCreator = false,
                            IsInitial = true,
                            IsMultiple = false,
                            Order = 3f,
                            RoleId = 8,
                            UserId = 12
                        },
                        new
                        {
                            Id = 8,
                            DocumentTypeId = 2,
                            FlowCode = "BUYER",
                            IsCreator = false,
                            IsInitial = false,
                            IsMultiple = true,
                            Order = 4f,
                            RoleId = 9
                        },
                        new
                        {
                            Id = 9,
                            DocumentTypeId = 3,
                            FlowCode = "STANDART",
                            IsCreator = true,
                            IsInitial = true,
                            IsMultiple = false,
                            Order = 1f,
                            RoleId = 9
                        },
                        new
                        {
                            Id = 10,
                            DocumentTypeId = 3,
                            FlowCode = "STANDART",
                            IsCreator = false,
                            IsInitial = true,
                            IsMultiple = false,
                            Order = 2f,
                            RoleId = 5,
                            UserId = 9
                        },
                        new
                        {
                            Id = 11,
                            DocumentTypeId = 3,
                            FlowCode = "STANDART",
                            IsCreator = false,
                            IsInitial = true,
                            IsMultiple = false,
                            Order = 3f,
                            RoleId = 6,
                            UserId = 4
                        },
                        new
                        {
                            Id = 12,
                            DocumentTypeId = 3,
                            FlowCode = "REVIEWER",
                            IsCreator = false,
                            IsInitial = false,
                            IsMultiple = false,
                            Order = 2.5f,
                            RoleId = 13
                        });
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar");

                    b.Property<ICollection<ReceivedInfo>>("ReceivedInfos")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("SendTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.ChatUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatUsers");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.ControlSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ControlSets");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Delegation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ToUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Delegations");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HeadUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("HeadUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("FlowCodes")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<string>("Number")
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.DocumentAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActionAssigned")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ActionPerformed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AssignerId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPerformed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<float>("Order")
                        .HasColumnType("real");

                    b.Property<int?>("PerformerId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignerId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PerformerId");

                    b.HasIndex("RoleId");

                    b.ToTable("DocumentActions");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.DocumentValidationConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ValidationDescription")
                        .HasColumnType("text");

                    b.Property<string>("ValidationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentValidationConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DocumentStatusId = 100,
                            DocumentTypeId = 1,
                            IsEnabled = true,
                            ValidationDescription = "",
                            ValidationName = "CheckEmptyItemsAsync"
                        },
                        new
                        {
                            Id = 2,
                            DocumentStatusId = 300,
                            DocumentTypeId = 3,
                            IsEnabled = true,
                            ValidationDescription = "",
                            ValidationName = "CheckEmptyItemsAsync"
                        });
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.FeatureConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Group", b =>
                {
                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("ChatId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.GroupUser", b =>
                {
                    b.Property<int>("ChatUserId")
                        .HasColumnType("integer");

                    b.Property<int>("ChatRole")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLeaved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("ChatUserId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalItemsPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.HasKey("DocumentId");

                    b.HasIndex("SupplierId");

                    b.ToTable("InvoiceDocuments");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PurchaseRequestItemId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PurchaseRequestItemId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("InvoiceDocumentItems");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CanCreateUser"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CanDeleteUser"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CanEditUser"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CanActivateUser"
                        },
                        new
                        {
                            Id = 5,
                            Name = "CanCreatePurchaseRequest"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CanCreateInvoice"
                        },
                        new
                        {
                            Id = 7,
                            Name = "CanViewMaterial"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CanViewInvoice"
                        },
                        new
                        {
                            Id = 9,
                            Name = "CanDeleteMaterial"
                        },
                        new
                        {
                            Id = 10,
                            Name = "CanCreateMaterial"
                        },
                        new
                        {
                            Id = 11,
                            Name = "CanViewPurchaseRequest"
                        },
                        new
                        {
                            Id = 12,
                            Name = "CanViewSupplier"
                        },
                        new
                        {
                            Id = 13,
                            Name = "CanCreateSupplier"
                        },
                        new
                        {
                            Id = 14,
                            Name = "CanViewUser"
                        },
                        new
                        {
                            Id = 15,
                            Name = "CanCreateDelegation"
                        },
                        new
                        {
                            Id = 16,
                            Name = "CanViewDelegation"
                        },
                        new
                        {
                            Id = 17,
                            Name = "CanCreateDepartment"
                        },
                        new
                        {
                            Id = 18,
                            Name = "CanAssignUserDepartment"
                        },
                        new
                        {
                            Id = 19,
                            Name = "CanReturnInvoice"
                        },
                        new
                        {
                            Id = 20,
                            Name = "CanRejectInvoice"
                        },
                        new
                        {
                            Id = 21,
                            Name = "CanReturnPurchaseRequest"
                        },
                        new
                        {
                            Id = 22,
                            Name = "CanRejectPurchaseRequest"
                        },
                        new
                        {
                            Id = 23,
                            Name = "CanViewAll"
                        },
                        new
                        {
                            Id = 24,
                            Name = "CanChangeReviewer"
                        },
                        new
                        {
                            Id = 25,
                            Name = "CanGrantRole"
                        },
                        new
                        {
                            Id = 26,
                            Name = "CanRemoveRole"
                        },
                        new
                        {
                            Id = 27,
                            Name = "CanAssignBuyer"
                        },
                        new
                        {
                            Id = 28,
                            Name = "CanViewUnitOfMeasure"
                        },
                        new
                        {
                            Id = 29,
                            Name = "CanCreateUnitOfMeasure"
                        });
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.PurchaseRequest", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("RequestedForDepartmentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalItemsPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.HasKey("DocumentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestedForDepartmentId");

                    b.ToTable("PurchaseRequests");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.PurchaseRequestItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuyerId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PurchaseRequestId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PurchaseRequestId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("PurchaseRequestItems");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.ReleaseStrategyTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ActiveStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalFlowTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("AssignStatusId")
                        .HasColumnType("int");

                    b.Property<string>("FlowCodes")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalFlowTemplateId");

                    b.ToTable("ReleaseStrategyTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            ActionTypeId = 3,
                            ActiveStatusId = 100,
                            ApprovalFlowTemplateId = 1,
                            AssignStatusId = 101,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 1001,
                            ActionTypeId = 3,
                            ActiveStatusId = 101,
                            ApprovalFlowTemplateId = 2,
                            AssignStatusId = 102,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 1002,
                            ActionTypeId = 3,
                            ActiveStatusId = 102,
                            ApprovalFlowTemplateId = 3,
                            AssignStatusId = 103,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 1003,
                            ActionTypeId = 4,
                            ActiveStatusId = 101,
                            ApprovalFlowTemplateId = 2,
                            AssignStatusId = 100,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 1004,
                            ActionTypeId = 4,
                            ActiveStatusId = 102,
                            ApprovalFlowTemplateId = 3,
                            AssignStatusId = 100,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 1005,
                            ActionTypeId = 5,
                            ActiveStatusId = 101,
                            ApprovalFlowTemplateId = 2,
                            AssignStatusId = 107,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 1006,
                            ActionTypeId = 5,
                            ActiveStatusId = 102,
                            ApprovalFlowTemplateId = 3,
                            AssignStatusId = 107,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 1007,
                            ActionTypeId = 6,
                            ActiveStatusId = 100,
                            ApprovalFlowTemplateId = 1,
                            AssignStatusId = 106,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 1008,
                            ActionTypeId = 3,
                            ActiveStatusId = 100,
                            ApprovalFlowTemplateId = 1,
                            AssignStatusId = 101,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 1009,
                            ActionTypeId = 3,
                            ActiveStatusId = 101,
                            ApprovalFlowTemplateId = 2,
                            AssignStatusId = 102,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 1010,
                            ActionTypeId = 3,
                            ActiveStatusId = 102,
                            ApprovalFlowTemplateId = 3,
                            AssignStatusId = 103,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 1011,
                            ActionTypeId = 2,
                            ActiveStatusId = 103,
                            ApprovalFlowTemplateId = 4,
                            AssignStatusId = 105,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 1012,
                            ActionTypeId = 4,
                            ActiveStatusId = 101,
                            ApprovalFlowTemplateId = 2,
                            AssignStatusId = 100,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 1013,
                            ActionTypeId = 4,
                            ActiveStatusId = 102,
                            ApprovalFlowTemplateId = 3,
                            AssignStatusId = 100,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 1014,
                            ActionTypeId = 5,
                            ActiveStatusId = 101,
                            ApprovalFlowTemplateId = 2,
                            AssignStatusId = 107,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 1015,
                            ActionTypeId = 5,
                            ActiveStatusId = 102,
                            ApprovalFlowTemplateId = 3,
                            AssignStatusId = 107,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 1016,
                            ActionTypeId = 6,
                            ActiveStatusId = 100,
                            ApprovalFlowTemplateId = 1,
                            AssignStatusId = 106,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 2000,
                            ActionTypeId = 3,
                            ActiveStatusId = 200,
                            ApprovalFlowTemplateId = 5,
                            AssignStatusId = 201,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 2001,
                            ActionTypeId = 3,
                            ActiveStatusId = 201,
                            ApprovalFlowTemplateId = 6,
                            AssignStatusId = 202,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 2002,
                            ActionTypeId = 3,
                            ActiveStatusId = 202,
                            ApprovalFlowTemplateId = 7,
                            AssignStatusId = 203,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 2003,
                            ActionTypeId = 4,
                            ActiveStatusId = 201,
                            ApprovalFlowTemplateId = 6,
                            AssignStatusId = 200,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 2004,
                            ActionTypeId = 4,
                            ActiveStatusId = 202,
                            ApprovalFlowTemplateId = 7,
                            AssignStatusId = 100,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 2005,
                            ActionTypeId = 5,
                            ActiveStatusId = 201,
                            ApprovalFlowTemplateId = 6,
                            AssignStatusId = 207,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 2006,
                            ActionTypeId = 5,
                            ActiveStatusId = 202,
                            ApprovalFlowTemplateId = 7,
                            AssignStatusId = 207,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 2007,
                            ActionTypeId = 6,
                            ActiveStatusId = 300,
                            ApprovalFlowTemplateId = 5,
                            AssignStatusId = 206,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 2008,
                            ActionTypeId = 3,
                            ActiveStatusId = 200,
                            ApprovalFlowTemplateId = 5,
                            AssignStatusId = 201,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 2009,
                            ActionTypeId = 3,
                            ActiveStatusId = 201,
                            ApprovalFlowTemplateId = 6,
                            AssignStatusId = 202,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 2010,
                            ActionTypeId = 3,
                            ActiveStatusId = 202,
                            ApprovalFlowTemplateId = 7,
                            AssignStatusId = 203,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 2011,
                            ActionTypeId = 2,
                            ActiveStatusId = 202,
                            ApprovalFlowTemplateId = 8,
                            AssignStatusId = 203,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 2012,
                            ActionTypeId = 4,
                            ActiveStatusId = 201,
                            ApprovalFlowTemplateId = 6,
                            AssignStatusId = 200,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 2013,
                            ActionTypeId = 4,
                            ActiveStatusId = 202,
                            ApprovalFlowTemplateId = 7,
                            AssignStatusId = 100,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 2014,
                            ActionTypeId = 5,
                            ActiveStatusId = 201,
                            ApprovalFlowTemplateId = 6,
                            AssignStatusId = 207,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 2015,
                            ActionTypeId = 5,
                            ActiveStatusId = 202,
                            ApprovalFlowTemplateId = 7,
                            AssignStatusId = 207,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 2016,
                            ActionTypeId = 6,
                            ActiveStatusId = 300,
                            ApprovalFlowTemplateId = 5,
                            AssignStatusId = 206,
                            FlowCodes = "STANDART_BUYER"
                        },
                        new
                        {
                            Id = 3000,
                            ActionTypeId = 3,
                            ActiveStatusId = 300,
                            ApprovalFlowTemplateId = 9,
                            AssignStatusId = 301,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 3001,
                            ActionTypeId = 3,
                            ActiveStatusId = 301,
                            ApprovalFlowTemplateId = 10,
                            AssignStatusId = 302,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 3002,
                            ActionTypeId = 2,
                            ActiveStatusId = 302,
                            ApprovalFlowTemplateId = 11,
                            AssignStatusId = 304,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 3003,
                            ActionTypeId = 6,
                            ActiveStatusId = 300,
                            ApprovalFlowTemplateId = 9,
                            AssignStatusId = 306,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 3004,
                            ActionTypeId = 4,
                            ActiveStatusId = 301,
                            ApprovalFlowTemplateId = 10,
                            AssignStatusId = 300,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 3005,
                            ActionTypeId = 4,
                            ActiveStatusId = 302,
                            ApprovalFlowTemplateId = 11,
                            AssignStatusId = 300,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 3006,
                            ActionTypeId = 5,
                            ActiveStatusId = 301,
                            ApprovalFlowTemplateId = 10,
                            AssignStatusId = 305,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 3007,
                            ActionTypeId = 5,
                            ActiveStatusId = 302,
                            ApprovalFlowTemplateId = 11,
                            AssignStatusId = 305,
                            FlowCodes = "STANDART"
                        },
                        new
                        {
                            Id = 3008,
                            ActionTypeId = 3,
                            ActiveStatusId = 300,
                            ApprovalFlowTemplateId = 9,
                            AssignStatusId = 301,
                            FlowCodes = "STANDART_REVIEWER"
                        },
                        new
                        {
                            Id = 3009,
                            ActionTypeId = 3,
                            ActiveStatusId = 301,
                            ApprovalFlowTemplateId = 10,
                            AssignStatusId = 303,
                            FlowCodes = "STANDART_REVIEWER"
                        },
                        new
                        {
                            Id = 3010,
                            ActionTypeId = 2,
                            ActiveStatusId = 302,
                            ApprovalFlowTemplateId = 11,
                            AssignStatusId = 304,
                            FlowCodes = "STANDART_REVIEWER"
                        },
                        new
                        {
                            Id = 3011,
                            ActionTypeId = 6,
                            ActiveStatusId = 300,
                            ApprovalFlowTemplateId = 9,
                            AssignStatusId = 306,
                            FlowCodes = "STANDART_REVIEWER"
                        },
                        new
                        {
                            Id = 3012,
                            ActionTypeId = 4,
                            ActiveStatusId = 301,
                            ApprovalFlowTemplateId = 10,
                            AssignStatusId = 300,
                            FlowCodes = "STANDART_REVIEWER"
                        },
                        new
                        {
                            Id = 3013,
                            ActionTypeId = 4,
                            ActiveStatusId = 302,
                            ApprovalFlowTemplateId = 11,
                            AssignStatusId = 300,
                            FlowCodes = "STANDART_REVIEWER"
                        },
                        new
                        {
                            Id = 3014,
                            ActionTypeId = 4,
                            ActiveStatusId = 303,
                            ApprovalFlowTemplateId = 12,
                            AssignStatusId = 300,
                            FlowCodes = "STANDART_REVIEWER"
                        },
                        new
                        {
                            Id = 3015,
                            ActionTypeId = 5,
                            ActiveStatusId = 301,
                            ApprovalFlowTemplateId = 10,
                            AssignStatusId = 305,
                            FlowCodes = "STANDART_REVIEWER"
                        },
                        new
                        {
                            Id = 3016,
                            ActionTypeId = 5,
                            ActiveStatusId = 302,
                            ApprovalFlowTemplateId = 11,
                            AssignStatusId = 305,
                            FlowCodes = "STANDART_REVIEWER"
                        },
                        new
                        {
                            Id = 3017,
                            ActionTypeId = 5,
                            ActiveStatusId = 303,
                            ApprovalFlowTemplateId = 12,
                            AssignStatusId = 305,
                            FlowCodes = "STANDART_REVIEWER"
                        });
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Requester"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Warehouse"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Coordinator"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 7,
                            Name = "HeadDepartment"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ProcurementDirector"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Buyer"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Director"
                        },
                        new
                        {
                            Id = 11,
                            Name = "PurchaseRequestKeyUser"
                        },
                        new
                        {
                            Id = 12,
                            Name = "InvoiceKeyUser"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Reviewer"
                        });
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 23
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 24
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 25
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 27
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 28
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 29
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 9,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 9,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 9,
                            PermissionId = 24
                        },
                        new
                        {
                            RoleId = 6,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 5,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 10,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 7,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 8,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 8,
                            PermissionId = 27
                        });
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TaxId")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanBeDecimal")
                        .HasColumnType("bool");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bool")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.UnitOfMeasureConverter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bool")
                        .HasDefaultValue(true);

                    b.Property<int>("SourceUnitOfMeasureId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetUnitOfMeasureId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("SourceUnitOfMeasureId");

                    b.HasIndex("TargetUnitOfMeasureId");

                    b.ToTable("UnitOfMeasureConverters");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.UserPassword", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserPassword");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.UserSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("ProcApi.Domain.ResultSets.CategoryResultSet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToFunction("get_categories_by_level");
                });

            modelBuilder.Entity("ProcApi.Domain.ResultSets.MaterialResultSet", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToFunction("get_material_with_categories");
                });

            modelBuilder.Entity("ProcApi.Domain.ResultSets.UnusedPRItemInfoResultSet", b =>
                {
                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PurchaseRequestItemId")
                        .HasColumnType("integer");

                    b.Property<string>("PurchaseRequestNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnusedQuantity")
                        .HasColumnType("numeric");

                    b.ToTable((string)null);

                    b.ToFunction("get_unused_purchase_request_items");
                });

            modelBuilder.Entity("ProcApi.Domain.ResultSets.UnusedPRItemResultSet", b =>
                {
                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PurchaseRequestItemId")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnusedCount")
                        .HasColumnType("numeric");

                    b.ToTable((string)null);

                    b.ToFunction("get_unused_purchase_request_items_by_ids");
                });

            modelBuilder.Entity("ProcApi.Domain.ResultSets.UserRoleResultSet", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToFunction("get_user_roles_with_delegated_roles");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.ApprovalFlowTemplate", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Category", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Chat", "Chat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.User", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.ChatUser", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Chat", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.User", "User")
                        .WithMany("ChatUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.ControlSet", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Delegation", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.User", "FromUser")
                        .WithMany("FromDelegations")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.User", "ToUser")
                        .WithMany("ToDelegations")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Department", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.User", "HeadUser")
                        .WithMany()
                        .HasForeignKey("HeadUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeadUser");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Document", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.User", "CreatedBy")
                        .WithMany("Documents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.DocumentAction", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.User", "Assigner")
                        .WithMany()
                        .HasForeignKey("AssignerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.Document", "Document")
                        .WithMany("Actions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.User", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ProcApi.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assigner");

                    b.Navigation("Document");

                    b.Navigation("Performer");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Group", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Chat", "Chat")
                        .WithOne()
                        .HasForeignKey("ProcApi.Domain.Entities.Group", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.GroupUser", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.ChatUser", "ChatUser")
                        .WithOne()
                        .HasForeignKey("ProcApi.Domain.Entities.GroupUser", "ChatUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("ProcApi.Domain.Entities.Invoice", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Document");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.PurchaseRequestItem", "PurchaseRequestItem")
                        .WithMany()
                        .HasForeignKey("PurchaseRequestItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("PurchaseRequestItem");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Material", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Category", "Category")
                        .WithMany("Materials")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.PurchaseRequest", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("ProcApi.Domain.Entities.PurchaseRequest", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProcApi.Domain.Entities.Department", "RequestedForDepartment")
                        .WithMany()
                        .HasForeignKey("RequestedForDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Document");

                    b.Navigation("Project");

                    b.Navigation("RequestedForDepartment");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.PurchaseRequestItem", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProcApi.Domain.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.PurchaseRequest", "PurchaseRequest")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Material");

                    b.Navigation("PurchaseRequest");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.ReleaseStrategyTemplate", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.ApprovalFlowTemplate", "ApprovalFlowTemplate")
                        .WithMany()
                        .HasForeignKey("ApprovalFlowTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalFlowTemplate");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.UnitOfMeasureConverter", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.UnitOfMeasure", "SourceUnitOfMeasure")
                        .WithMany("Converters")
                        .HasForeignKey("SourceUnitOfMeasureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.UnitOfMeasure", "TargetUnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("TargetUnitOfMeasureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SourceUnitOfMeasure");

                    b.Navigation("TargetUnitOfMeasure");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.User", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.UserPassword", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.User", "User")
                        .WithOne("UserPassword")
                        .HasForeignKey("ProcApi.Domain.Entities.UserPassword", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcApi.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.UserSetting", b =>
                {
                    b.HasOne("ProcApi.Domain.Entities.User", "User")
                        .WithOne("UserSetting")
                        .HasForeignKey("ProcApi.Domain.Entities.UserSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Category", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Chat", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("ChatUsers");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Document", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.PurchaseRequest", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Navigation("Converters");
                });

            modelBuilder.Entity("ProcApi.Domain.Entities.User", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("ChatUsers");

                    b.Navigation("Documents");

                    b.Navigation("FromDelegations");

                    b.Navigation("ToDelegations");

                    b.Navigation("UserPassword")
                        .IsRequired();

                    b.Navigation("UserSetting")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
